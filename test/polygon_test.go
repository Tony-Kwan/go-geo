package test

import (
	"fmt"
	"github.com/Tony-Kwan/go-geo/geo"
	wkt2 "github.com/Tony-Kwan/go-geo/geo/io/wkt"
	"github.com/atotto/clipboard"
	"strings"
	"testing"
)

var wktReader wkt2.WktReader
var calc = geo.VectorCalculator{}

func TestPolygon_Triangulate(t *testing.T) {
	var wktStr = "POLYGON((-119.14159855412011 41.92499096272812,-102.87886464247828 26.767453854346442,-90.9950327117614 32.905865438530256,-93.78787570746942 36.051610613180415,-98.38245074916146 33.171901863337226,-102.05698491988139 36.07009780383788,-96.33267709169169 38.664513680653954,-88.4319360597416 37.10206976053486,-87.28074151678913 30.775914227484662,-87.59809404666174 26.844389706437113,-79.64598553204937 29.904465341243238,-80.44042235294994 37.59795124939845,-84.81650967729065 43.819424657392034,-96.2837724335406 40.82461783417634,-98.73181999767975 46.03621512184026,-103.30774793950121 42.50917847188873,-108.37624078356396 46.00372124466807,-119.14159855412011 41.92499096272812))"
	var polygon = wkt2.MustPolygon(wktReader.Read(wktStr))
	tris, err := polygon.Triangulate()
	if err != nil {
		t.Error(err)
		return
	}
	wkts := make([]string, len(tris))
	for i, tri := range tris {
		wkts[i] = tri.String()
	}
	wkt := fmt.Sprintf("GEOMETRYCOLLECTION(%s)", strings.Join(wkts, ", "))
	t.Log(wkt)
	clipboard.WriteAll(wkt)
}

func TestPolygon_ConvexHull(t *testing.T) {
	var wktStr = "POLYGON((-119.14159855412011 41.92499096272812,-102.87886464247828 26.767453854346442,-90.9950327117614 32.905865438530256,-93.78787570746942 36.051610613180415,-98.38245074916146 33.171901863337226,-102.05698491988139 36.07009780383788,-96.33267709169169 38.664513680653954,-88.4319360597416 37.10206976053486,-87.28074151678913 30.775914227484662,-87.59809404666174 26.844389706437113,-79.64598553204937 29.904465341243238,-80.44042235294994 37.59795124939845,-84.81650967729065 43.819424657392034,-96.2837724335406 40.82461783417634,-98.73181999767975 46.03621512184026,-103.30774793950121 42.50917847188873,-108.37624078356396 46.00372124466807,-119.14159855412011 41.92499096272812))"
	var polygon = wkt2.MustPolygon(wktReader.Read(wktStr))
	hull, _ := polygon.ConvexHull()
	t.Log(hull.String())

	wkt := fmt.Sprintf("GEOMETRYCOLLECTION(%s,%s)", polygon.String(), hull.String())
	t.Log(wkt)
	clipboard.WriteAll(wkt)
}

func TestPolygon_MinCoverCircle(t *testing.T) {
	wktStr := "POLYGON((120.584017 30.334264,120.616301 30.273781,120.526286 30.244407,120.501884 30.284578,120.584017 30.334264,120.345366 30.212234,120.368149 30.177084,120.284766 30.127091,120.248699 30.187233,120.345366 30.212234,120.52629261821812 30.24436668295212,120.52697582270933 30.233299334035987,120.52382297492878 30.216926182050383,120.50816882313957 30.192957338856885,120.483794 30.177527,120.43219775825095 30.16072212797702,120.40038343656032 30.16166599384457,120.37713335485847 30.17080612177303,120.368149 30.177084,120.34537517739905 30.212194490559547,120.34438558172529 30.217674992600042,120.34778835792177 30.24504085732033,120.36426475505374 30.26859901749025,120.382862 30.280802,120.416186504205 30.295798257235646,120.44058500229838 30.30241947134751,120.4661354368617 30.301431620999843,120.49500712737346 30.289765916116554,120.501884 30.284578,120.52629261821812 30.24436668295212,120.5953138486885 30.39368525224143,120.68281747356784 30.230453059776597,120.27156347260748 30.06603842681942,120.1842060444106 30.229270619443145,120.5953138486885 30.39368525224143,120.574023 30.350935,120.606332 30.287108,120.514625 30.261084,120.491845 30.30125,120.574023 30.350935,120.335386 30.230601,120.358116 30.190422,120.274747 30.140427,120.242044 30.200586,120.335386 30.230601,120.51463306543144 30.26104406230654,120.51572370882518 30.250001097220096,120.51317486382023 30.23354956586078,120.50876208686653 30.223142956821338,120.49840831046319 30.209162540888467,120.477138 30.194198,120.42572487592481 30.17352591501829,120.39388785681989 30.17355089354241,120.36504062974964 30.185198748272395,120.358116 30.190422,120.33539312139733 30.23056081396441,120.33498290762775 30.247155269232408,120.33749194435569 30.258024365139146,120.35283562834141 30.28214751503115,120.376206 30.297473,120.42752707781861 30.314916441792395,120.45307374576718 30.316036178574258,120.48310678971662 30.30680009209954,120.491845 30.30125,120.51463306543144 30.26104406230654,120.58865815180187 30.408691824196655,120.67618595808533 30.24546393634518,120.26488532399638 30.0810311963203,120.17750385884608 30.244259084330878,120.58865815180187 30.408691824196655))"
	var polygon = wkt2.MustPolygon(wktReader.Read(wktStr))
	fmt.Println(polygon.GetNumPoints())
	circle, err := calc.MinCoverCircle(polygon.GetShell()...)
	if err != nil {
		t.Error(err)
		return
	}
	fmt.Println(circle.GetRadius() * geo.EarthRadius)
	cirPolygon := circle.ToPolygon(32)
	wkt := fmt.Sprintf("GEOMETRYCOLLECTION(%s,%s)", polygon.String(), cirPolygon.String())
	t.Log(wkt)
	//clipboard.WriteAll(wkt)
}

func TestPolygon_Circumcenter(t *testing.T) {
	p1, p2, p3 := geo.NewPoint(120.58865815180188, 30.408691824196666, nil), geo.NewPoint(120.67618595808533, 30.24546393634516, nil), geo.NewPoint(120.68281747356784, 30.230453059776593, nil)
	t.Log(calc.Bearing(p1, p2))
	t.Log(calc.Bearing(p1, p3))
	t.Log(calc.Bearing(p2, p3))

	c, err := calc.Circumcenter(p1, p2, p3)
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(c)
	t.Log(calc.Distance(c, p1) * geo.EarthRadius)
	t.Log(calc.Distance(c, p2) * geo.EarthRadius)
	t.Log(calc.Distance(c, p3) * geo.EarthRadius)

	circle, _ := calc.MinCoverCircle(*p2, *p1, *p3)
	t.Log(circle.GetRadius() * geo.EarthRadius)
}
