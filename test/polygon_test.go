package test

import (
	"fmt"
	"github.com/Tony-Kwan/go-geo/geo"
	"github.com/Tony-Kwan/go-geo/geo/io/geojson"
	wkt2 "github.com/Tony-Kwan/go-geo/geo/io/wkt"
	"github.com/atotto/clipboard"
	"math"
	"testing"
)

var calc = geo.VectorCalculator{}

func TestPolygon_Triangulate(t *testing.T) {
	var wktStr = "POLYGON((-81.17061893429998 29.480056431500003,-81.18722876968559 29.469692395623255,-81.16458972779999 29.46415400310002,-81.1272890215 29.460051243099997,-81.133653453 29.4403458341,-81.16794171790002 29.45376429799998,-81.20013422968789 29.461639778161086,-81.20972296637115 29.455656695927516,-81.2058918196 29.429952449900014,-81.1955997485 29.398468924200003,-81.2189023361 29.395833882800005,-81.2181794089 29.4285629699,-81.22115672199574 29.44852237757047,-81.2410056151 29.449413482699995,-81.22296854975409 29.460668567001903,-81.22398374296428 29.46747425202564,-81.2442545563 29.472433243399976,-81.2815606519 29.47653024280001,-81.2752052098 29.496236469699994,-81.2409002435 29.4828225312,-81.22571922956847 29.479108663162705,-81.2273819469 29.49025524130002,-81.2376861542 29.52173806820001,-81.21436262759998 29.524373685799986,-81.21508686530001 29.491644609199994,-81.21274535382314 29.475934747199815,-81.20251445653352 29.47343187073794,-81.1778413341 29.488827838299983,-81.15084304890001 29.511618865999992,-81.13714804159999 29.494980623199993,-81.17061893429998 29.480056431500003))"
	//var wktStr = "POLYGON((-119.14159855412011 41.92499096272812,-102.87886464247828 26.767453854346442,-90.9950327117614 32.905865438530256,-93.78787570746942 36.051610613180415,-98.38245074916146 33.171901863337226,-102.05698491988139 36.07009780383788,-96.33267709169169 38.664513680653954,-88.4319360597416 37.10206976053486,-87.28074151678913 30.775914227484662,-87.59809404666174 26.844389706437113,-79.64598553204937 29.904465341243238,-80.44042235294994 37.59795124939845,-84.81650967729065 43.819424657392034,-96.2837724335406 40.82461783417634,-98.73181999767975 46.03621512184026,-103.30774793950121 42.50917847188873,-108.37624078356396 46.00372124466807,-119.14159855412011 41.92499096272812))"
	var polygon = wkt2.MustPolygon(wkt2.WktReader{}.Read(wktStr))
	tris, err := polygon.Triangulate()
	if err != nil {
		t.Error(err)
		return
	}
	ps := make([]geo.Polygon, len(tris))
	for i, tri := range tris {
		ps[i] = tri.ToPolygon()
	}
	clipboard.WriteAll(geojson.GeojsonWriter{}.EncodePolygons(ps))
}

func TestPolygon_ConvexHull(t *testing.T) {
	var wktStr = "POLYGON((-119.14159855412011 41.92499096272812,-102.87886464247828 26.767453854346442,-90.9950327117614 32.905865438530256,-93.78787570746942 36.051610613180415,-98.38245074916146 33.171901863337226,-102.05698491988139 36.07009780383788,-96.33267709169169 38.664513680653954,-88.4319360597416 37.10206976053486,-87.28074151678913 30.775914227484662,-87.59809404666174 26.844389706437113,-79.64598553204937 29.904465341243238,-80.44042235294994 37.59795124939845,-84.81650967729065 43.819424657392034,-96.2837724335406 40.82461783417634,-98.73181999767975 46.03621512184026,-103.30774793950121 42.50917847188873,-108.37624078356396 46.00372124466807,-119.14159855412011 41.92499096272812))"
	var polygon = wkt2.MustPolygon(wkt2.WktReader{}.Read(wktStr))
	hull, _ := polygon.ConvexHull()
	t.Log(hull.String())

	wkt := fmt.Sprintf("GEOMETRYCOLLECTION(%s,%s)", polygon.String(), hull.String())
	t.Log(wkt)
	clipboard.WriteAll(wkt)
}

func TestPolygon_Split(t *testing.T) {
	//wktStr := "POLYGON((-81.17061893429998 29.480056431500003,-81.18722876968559 29.469692395623255,-81.16458972779999 29.46415400310002,-81.1272890215 29.460051243099997,-81.133653453 29.4403458341,-81.16794171790002 29.45376429799998,-81.20013422968789 29.461639778161086,-81.20972296637115 29.455656695927516,-81.2058918196 29.429952449900014,-81.1955997485 29.398468924200003,-81.2189023361 29.395833882800005,-81.2181794089 29.4285629699,-81.22115672199574 29.44852237757047,-81.233787128 29.440641385499973,-81.260763335 29.417847494400007,-81.27445843 29.43448412120003,-81.2410056151 29.449413482699995,-81.22296854975409 29.460668567001903,-81.22398374296428 29.46747425202564,-81.2442545563 29.472433243399976,-81.2815606519 29.47653024280001,-81.2752052098 29.496236469699994,-81.2409002435 29.4828225312,-81.22571922956847 29.479108663162705,-81.2273819469 29.49025524130002,-81.2376861542 29.52173806820001,-81.21436262759998 29.524373685799986,-81.21508686530001 29.491644609199994,-81.21274535382314 29.475934747199815,-81.20251445653352 29.47343187073794,-81.1778413341 29.488827838299983,-81.15084304890001 29.511618865999992,-81.13714804159999 29.494980623199993,-81.17061893429998 29.480056431500003))"
	//wktStr := "POLYGON ((-72.6625489755 41.7058281537, -72.65773657440289 41.72875037718501, -72.67968755360832 41.7313294479, -72.6857425043 41.7313294479, -72.7291221889 41.7264827807, -72.72912675064119 41.73325756824532, -72.7382868702 41.7333095453, -72.7340325441 41.7535300403, -72.6921720683 41.7437211, -72.67855597165304 41.7421213071, -72.65492941750408 41.7421213071, -72.648843517 41.7711094086, -72.6485312306 41.8038437256, -72.6214112834 41.8006735846, -72.6345482685 41.7694384099, -72.6402894289542 41.7421213071, -72.6131485194 41.7421213071, -72.5697550285 41.7469517602, -72.56976368878595 41.734090092905774, -72.5685049073 41.734082563, -72.56976771291183 41.72811373503412, -72.5697688111 41.7264827807, -72.5701048260383 41.72652032252621, -72.5727826404 41.7138632571, -72.6146185521 41.7236843422, -72.64345228301231 41.72707208314331, -72.648268316 41.7041568434, -72.6485812398 41.6714225324, -72.6756614172 41.6745917717, -72.6625489755 41.7058281537))"
	wktStr := "POLYGON ((2.36258301547 49.1554028788, 2.32450743259275 49.159886110452945, 2.28594277525 49.1393939631, 2.25221630224 49.1152173791, 2.2324758142 49.1311002013, 2.27553945935 49.1477694931, 2.3030857285023614 49.16240842146123, 2.26947440243 49.1663660066, 2.21943170346 49.1673335824, 2.219582492520187 49.16788276114527, 2.21934076418 49.1678849444, 2.22438624324 49.1880852857, 2.2720718897 49.1780824974, 2.322427514445812 49.172687236978426, 2.34992331879 49.1872993468, 2.38371035179 49.2114691083, 2.40345296463 49.1955818574, 2.36033669372 49.1789247471, 2.3442067203687755 49.17035374417951, 2.36471025897 49.1681569304, 2.41477077971 49.1676879929, 2.414112002116976 49.16506821604261, 2.41554708482 49.1650399948, 2.40998264253 49.1448958544, 2.36258301547 49.1554028788))"
	var polygon = wkt2.MustPolygon(wkt2.WktReader{}.Read(wktStr))
	ps, err := polygon.Split(4)
	if err != nil {
		t.Error(err)
		return
	}
	fmt.Println(len(ps))
	//ps = append(ps, *polygon)
	clipboard.WriteAll(geojson.GeojsonWriter{}.EncodePolygons(ps))
	total := polygon.GetArea() * geo.EarthRadius2
	fmt.Println("total_area=", total, ", total_point_cnt=", len(polygon.GetShell()))
	for _, p := range ps {
		area := p.GetArea() * geo.EarthRadius2
		fmt.Println(math.Round(area/total*10000)/100, "%", len(p.GetShell()), area)
	}
}
